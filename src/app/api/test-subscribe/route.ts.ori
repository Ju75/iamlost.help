// src/app/api/test-subscribe/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '@/lib/auth';
import { PrismaClient } from '@prisma/client';
import { generateUniqueId } from '@/lib/unique-id';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { planType = '12months' } = body;

    // Require authentication
    const token = request.cookies.get('auth-token')?.value;
    const user = await requireAuth(token);

    console.log('Creating test subscription for user:', user.id);

    // Start transaction
    const result = await prisma.$transaction(async (tx) => {
      // 1. Create subscription record
      const subscription = await tx.subscription.create({
        data: {
          userId: user.id,
          stripeCustomerId: `cus_test_${Date.now()}`, // Fake Stripe customer ID
          stripeSubscriptionId: `sub_test_${Date.now()}`, // Fake subscription ID
          planType: planType.toUpperCase().replace(/([0-9]+)MONTHS/, '$1_MONTHS'), // Convert "12months" to "TWELVE_MONTHS"
          status: 'ACTIVE',
          currentPeriodStart: new Date(),
          currentPeriodEnd: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year from now
          cancelAtPeriodEnd: false
        }
      });

      // 2. Check if user already has a unique ID
      const existingId = await tx.uniqueId.findUnique({
        where: { userId: user.id }
      });

      let uniqueId;
      if (!existingId) {
        // 3. Generate unique ID for new customer
        const { displayId, encryptedToken } = await generateUniqueId();
        
        uniqueId = await tx.uniqueId.create({
          data: {
            userId: user.id,
            displayId,
            encryptedToken,
            status: 'ACTIVE'
          }
        });
      } else {
        // Reactivate existing ID if needed
        uniqueId = await tx.uniqueId.update({
          where: { id: existingId.id },
          data: { status: 'ACTIVE' }
        });
      }

      // 4. Create payment record
      const planPrices = {
        'monthly': 590,
        '6months': 990,
        '12months': 1490,
        '24months': 1990
      };

      await tx.payment.create({
        data: {
          userId: user.id,
          subscriptionId: subscription.id,
          amount: planPrices[planType as keyof typeof planPrices] || 1490,
          currency: 'USD',
          paymentType: 'SUBSCRIPTION',
          status: 'SUCCEEDED'
        }
      });

      return { subscription, uniqueId };
    });

    console.log('Test subscription created:', {
      subscriptionId: result.subscription.id,
      uniqueId: result.uniqueId.displayId
    });

    return NextResponse.json({
      success: true,
      message: 'Test subscription created successfully',
      data: {
        subscriptionId: result.subscription.id,
        uniqueId: result.uniqueId.displayId,
        planType: result.subscription.planType
      }
    });

  } catch (error: any) {
    console.error('Test subscription error:', error);
    return NextResponse.json(
      { 
        error: error.message || 'Failed to create test subscription',
        details: process.env.NODE_ENV === 'development' ? String(error) : undefined
      },
      { status: 500 }
    );
  }
}
