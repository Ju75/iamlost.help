// src/app/api/found-item/validate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { getUserFromEncryptedToken } from '@/lib/unique-id';
import { createHash } from 'crypto';

const prisma = new PrismaClient();

// Generate a display ID from token for fake IDs (same logic as lookup/route.ts)
function generateDisplayIdFromToken(token: string): string {
  const hash = createHash('sha256').update(`display_${token}_${process.env.NEXTAUTH_SECRET || 'fallback'}`).digest('hex');
  return hash.substring(0, 6).toUpperCase();
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîç Validate API called');
    
    const body = await request.json();
    console.log('üì¶ Request body:', body);
    
    const { encryptedToken } = body;

    if (!encryptedToken) {
      console.log('‚ùå No encrypted token provided');
      return NextResponse.json(
        { error: 'Encrypted token is required' },
        { status: 400 }
      );
    }

    console.log('üîê Validating token:', encryptedToken.substring(0, 20) + '...');

    // Try to find the user by encrypted token
    const userId = await getUserFromEncryptedToken(encryptedToken);
    console.log('üë§ User ID from token:', userId);

    if (userId) {
      // Real user found - do full validation
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: {
          email: true,
          firstName: true,
          lastName: true,
          status: true
        }
      });

      console.log('üë§ User found:', user ? 'YES' : 'NO');

      if (user && user.status === 'ACTIVE') {
        // Check if user has active subscription
        const subscription = await prisma.subscription.findFirst({
          where: {
            userId,
            status: 'ACTIVE',
            currentPeriodEnd: {
              gt: new Date()
            }
          }
        });

        console.log('üí≥ Subscription found:', subscription ? 'YES' : 'NO');

        if (subscription) {
          // Get the unique ID record
          const uniqueIdRecord = await prisma.uniqueId.findUnique({
            where: { encryptedToken },
            select: { 
              displayId: true,
              id: true
            }
          });

          console.log('üÜî Unique ID record found:', uniqueIdRecord ? 'YES' : 'NO');

          if (uniqueIdRecord) {
            console.log('‚úÖ Real user validation successful');

            const responseData = {
              success: true,
              displayId: uniqueIdRecord.displayId,
              isRealUser: true
            };

            console.log('üì§ Returning real user data:', responseData);
            return NextResponse.json(responseData);
          }
        }
      }
    }

    // If we get here, it's either a fake ID or invalid real ID
    // For demo purposes, return success anyway with generated display ID
    const fakeDisplayId = generateDisplayIdFromToken(encryptedToken);
    
    console.log('‚úÖ Fake ID validation - returning success anyway');

    const responseData = {
      success: true,
      displayId: fakeDisplayId,
      isRealUser: false  // You can use this to track if it's real or demo
    };

    console.log('üì§ Returning fake user data:', responseData);
    return NextResponse.json(responseData);

  } catch (error) {
    console.error('‚ùå Error validating encrypted token:', error);
    
    // Even on error, return success for demo purposes
    const fakeDisplayId = 'ERR001';
    
    return NextResponse.json({
      success: true,
      displayId: fakeDisplayId,
      isRealUser: false
    });
  }
}
