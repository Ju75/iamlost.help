// STEP 1: First, let's add debugging to see what's happening
// Update your src/app/api/found-item/lookup/route.ts with this version:

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { getUserFromDisplayId, normalizeDisplayId } from '@/lib/unique-id';
import { createHash } from 'crypto';

const prisma = new PrismaClient();

function generateFakeToken(input: string): string {
  const hash = createHash('sha256').update(`fake_salt_${input}_${process.env.NEXTAUTH_SECRET || 'fallback'}`).digest('hex');
  return hash.substring(0, 64);
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { displayId } = body;

    console.log('🔍 === LOOKUP API DEBUG ===');
    console.log('🔍 Input displayId:', displayId);

    if (!displayId) {
      const fakeToken = generateFakeToken('missing_id_' + Date.now());
      console.log('❌ No displayId provided');
      return NextResponse.json({
        success: true,
        encryptedToken: fakeToken
      });
    }

    const normalizedId = normalizeDisplayId(displayId);
    console.log('🔍 Normalized ID:', normalizedId);
    
    // THIS IS THE CRITICAL CALL - Let's see what it returns
    const result = await getUserFromDisplayId(normalizedId);
    console.log('📊 getUserFromDisplayId returned:', result);
    console.log('📊 Type of result:', typeof result);
    console.log('📊 Result keys:', result ? Object.keys(result) : 'null');

    if (!result) {
      const fakeToken = generateFakeToken(normalizedId);
      console.log('❌ No result from getUserFromDisplayId, returning fake token:', fakeToken);
      return NextResponse.json({
        success: true,
        encryptedToken: fakeToken
      });
    }

    // Check if result has encryptedToken property
    if (!result.encryptedToken) {
      console.log('🚨 PROBLEM: result does not have encryptedToken property!');
      console.log('🚨 Result structure:', JSON.stringify(result, null, 2));
      
      // Fallback: try to get the token directly from database
      console.log('🔧 Attempting direct database lookup...');
      const directLookup = await prisma.uniqueId.findUnique({
        where: { displayId: normalizedId },
        select: { encryptedToken: true, userId: true, status: true }
      });
      console.log('🔧 Direct lookup result:', directLookup);
      
      if (directLookup && directLookup.encryptedToken) {
        console.log('✅ Found token via direct lookup:', directLookup.encryptedToken);
        return NextResponse.json({
          success: true,
          encryptedToken: directLookup.encryptedToken
        });
      }
      
      const fakeToken = generateFakeToken(normalizedId);
      return NextResponse.json({
        success: true,
        encryptedToken: fakeToken
      });
    }

    // If we get here, we should have the real token
    console.log('✅ SUCCESS: Real token found:', result.encryptedToken);
    return NextResponse.json({
      success: true,
      encryptedToken: result.encryptedToken
    });

  } catch (error) {
    console.error('💥 Error in lookup API:', error);
    const fakeToken = generateFakeToken('error_' + Date.now());
    return NextResponse.json({
      success: true,
      encryptedToken: fakeToken
    });
  }
}
