
// In src/lib/unique-id.ts
// REPLACE your current getUserFromDisplayId function with this EXACT version:

export async function getUserFromDisplayId(displayId: string, ipAddress?: string): Promise<{ userId: number; encryptedToken: string } | null> {
  try {
    // Normalize the input first
    const normalizedId = normalizeDisplayId(displayId);
    
    console.log('üîç [getUserFromDisplayId] Looking up displayId:', normalizedId);
    
    const uniqueId = await prisma.uniqueId.findUnique({
      where: { displayId: normalizedId },
      select: { 
        userId: true, 
        status: true, 
        encryptedToken: true,
        user: {
          select: {
            status: true
          }
        }
      },
    });
    
    console.log('üìä [getUserFromDisplayId] Database result:', uniqueId ? 'FOUND' : 'NOT FOUND');
    if (uniqueId) {
      console.log('üìä [getUserFromDisplayId] Found token:', uniqueId.encryptedToken.substring(0, 20) + '...');
      console.log('üìä [getUserFromDisplayId] User status:', uniqueId.user.status);
      console.log('üìä [getUserFromDisplayId] UniqueId status:', uniqueId.status);
    }
    
    if (!uniqueId || uniqueId.status !== 'ACTIVE') {
      console.log('‚ùå [getUserFromDisplayId] No uniqueId found or not active');
      return null;
    }
    
    if (uniqueId.user.status !== 'ACTIVE') {
      console.log('‚ùå [getUserFromDisplayId] User not active');
      return null;
    }
    
    const result = {
      userId: uniqueId.userId,
      encryptedToken: uniqueId.encryptedToken
    };
    
    console.log('‚úÖ [getUserFromDisplayId] Returning result:', {
      userId: result.userId,
      encryptedToken: result.encryptedToken.substring(0, 20) + '...'
    });
    
    return result;
  } catch (error) {
    console.error('üí• [getUserFromDisplayId] Error:', error);
    return null;
  }
}
